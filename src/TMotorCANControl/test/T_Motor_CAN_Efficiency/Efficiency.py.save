from NeuroLocoMiddleware.SoftRealtimeLoop import SoftRealtimeLoop
from NeuroLocoMiddleware.AdcManager import ADC_Manager
import time
import csv
import numpy as np
from sys import path
path.append("~/TMotorCANControl/src/")
from TMotorCANControl.servo_can import TMotorManager_servo_can
from TMotorCANControl.servo_serial import *
#from TMotorCANControl.test.servo_serial.Serial_manager_servo import *
import serial


torque_rating = 100  # 100 Nm = 5 V
def volt_to_torque(volt, bias=0):
    return (volt-2.5-bias)/2.5*torque_rating

bias = 0
with ADC_Manager('ADC_backup_log.csv') as adc:
    adc.update()
    voltage_cal = []
    print("Calibrating Loadcell!!!")
    for i in range(500):
        adc.update()
        voltage_cal.append(adc.volts)
    avg_volt = np.mean(np.array(voltage_cal))
    bias = avg_volt - 2.5
    print("Bias: {} V".format(bias))
    adc.update()


# v_min always 0
speed_test_array = [1, 2, 4, 6, 8, 10, 12, 14, 16]
current_test_array = [0.5,1,2,4,6,8,10,12,14,15]
#speed_test_array = [1]

# pre_duty_test_array = [0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]
# duty_test_array = []
# for d in pre_duty_test_array:
#     duty_test_array.append(d)
#     duty_test_array.append(0.0)

num_iters = len(speed_test_array)
step_duration = 3.0 # seconds

ERPM_to_RadPs = 2*np.pi/180/60 # (2/21)*9*(1/60)*(np.pi/180)

i = 0
iq_antagonist = 0
 
with open("Measuring_efficiency_{}_A_antagonist{}.csv".format(iq_antagonist,time.time()),'w') as fd:
    writer = csv.writer(fd)
    writer.writerow(["timestamp (epoch)", "loop time (s)", "des velocity", "velocity (Rad/S)", "Futek Torque (Nm)","v_bus", "i_bus", "v_q", "i_q"])
    
    with TMotorManager_servo_serial(motor_type='AK10-9', port = '/dev/ttyUSB1', baud=961200) as dev:  # Driven, AK10-9
        with TMotorManager_servo_serial(motor_type='AK80-9', port = '/dev/ttyUSB0', baud=961200) as ser: # Driving AK80-9
            with ADC_Manager('ADC_backup_log.csv') as adc:                                  # FUTEK
                #for curr in current_test_array:
                #ser.update()
                #time.sleep(5)
                #dev.enter_idle_mode()
                #ser.enter_idle_mode()
                #ser.update()
                #dev.update()
                                   
                adc.update()
                params = servo_serial_motor_state()
                #ser.write(bytearray(startup_sequence()))
                #ser.write(bytearray(set_motor_parameter_return_format_all()))
                i = 0
                for curr in current_test_array:    
                    loop = SoftRealtimeLoop(dt=0.05, report=True, fade=0.0)
                    dev.enter_current_control()
                    ser.enter_velocity_control()
                    #i = 0
                    t_next = step_duration
                    print("testing with: {} rad\s".format(speed_test_array[i]))
                    time.sleep(0.1)
                    for t in loop:
                        adc.update()

                        if t >= t_next:
                            t_next += step_duration
                            i += 1
                            if i < num_iters:
                                print("testing with: {} rad\s".format(speed_test_array[i]))
                            else:
                                break

                        #dev.Î¸d = speed_test_array[i]
                        #dev.update()
                        
                        ser.set_output_velocity_radians_per_second(speed_test_array[i])
                        dev.current_qaxis = curr
                        #print(volt_to_torque(adc.volts, bias=bias))
                        ser.update()
                        dev.update()
                        # put this into an "update" function later and run ascynch
                        #data = read_packet(ser)
                        #if len(data):
                        #    p = parse_motor_parameters(data)
                        #    if p.initialized:
                        #        params = p
                        #ser.write(bytearray(comm_get_motor_parameters()))
            

                        writer.writerow([time.time(), t, speed_test_array[i] , ser.get_output_velocity_radians_per_second(), volt_to_torque(adc.volts, bias=bias), ser.get_voltage_bus_volts(), ser.get_current_bus_amps(), ser.get_voltage_qaxis_volts(), ser.get_current_qaxis_amps()])
                        #print(t)
                        print(ser.get_mosfet_temperature_celsius()," , ",dev.get_mosfet_temperature_celsius()," , ",speed_test_array[i]," , ",curr)
                #dev.current_qaxis = 0
                #dev.update()
                #for spd in range(speed_test_array[i], 0, -1):
                #    ser.set_output_velocity_radians_per_second(spd)
                #    ser.update()
                #    time.sleep(1)
                #    #spd = spd-1
               	#    #time.sleep(5)
                ser.set_output_velocity_radians_per_second(0)
                ser.update()
                while(ser.get_mosfet_temperature_celsius() >=35 or ser.get_mosfet_temperature_celsius()==0):
                    print("Cooling DOWN: ",ser.get_mosfet_temperature_celsius())
                    ser.update()
                    time.sleep(2)













